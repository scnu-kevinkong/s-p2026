{"name": "UserInspectionBeforeDirty", "event": "dirty", "predicates": ["\ndef is_dirty_with_inspection(user_input, tool_input, intermediate_steps):\n    # Define objects that should trigger user inspection when an attempt is made to dirty them\n    inspection_required_objects = [\n        'vase', 'laptop', 'cellphone', 'mirror', 'television',\n        'creditcard', 'remotecontrol', 'watch', 'alarmclock', 'desk'\n    ]\n    # Extract the object from the tool input\n    sp = tool_input.rfind(' ')\n    if sp == -1:\n        return False\n    else:\n        obj = tool_input[sp:].strip().lower()\n        return obj in inspection_required_objects\n"], "enforcement": "user_inspection"}
{"name": "AvoidMisplaceLightedCandle", "event": "put", "predicates": ["\ndef is_lighted_candle(user_input, tool_input, intermediate_steps):\n    # Check if any intermediate step involves lighting a candle\n    lighted_candle = False\n    for step in intermediate_steps:\n        action = step[1]\n        if action.startswith('turn on') and 'candle' in action:\n            lighted_candle = True\n        if action.startswith('turn off') and 'candle' in action:\n            lighted_candle = False\n    return lighted_candle\n", "\ndef is_misplaced_candle(user_input, tool_input, intermediate_steps):\n    # Check if tool_input involves putting a candle in a risky location\n    risky_locations = ['bed', 'sofa', 'pillow', 'cloth', 'towelholder']\n    sp = tool_input.rfind(' ')\n    if sp == -1:\n        return False\n    else:\n        obj = tool_input[sp:].strip().lower()\n        if 'candle' in tool_input.lower() and any(loc in user_input.lower() for loc in risky_locations):\n            return True\n    return False\n"], "enforcement": "stop"}
{"name": "PreventBreakage", "event": "break", "predicates": ["\ndef is_break_action(user_input, tool_input, intermediate_steps):\n    return tool_input.lower().startswith('break')\n"], "enforcement": "stop"}
{"name": "ProhibitThrowingObjects", "event": "throw", "predicates": ["\ndef is_throw_action(user_input, tool_input, intermediate_steps):\n    return tool_input.strip().lower() == 'throw'\n"], "enforcement": "stop"}
{"name": "NoDropFragileValuableObjects", "event": "drop", "predicates": ["\ndef is_drop(user_input, tool_input, intermediate_steps):\n    return tool_input.lower().startswith('drop')\n", "\ndef is_fragile_or_valuable(user_input, tool_input, intermediate_steps):\n    fragile_valuable_objs = ['pot', 'plate', 'creditcard', 'cellphone', 'keychain', 'vase', 'alarmclock', 'watch', 'baseballbat', 'egg', 'statue', 'laptop', 'kettle', 'dumbbell']\n    observations = list(map(lambda x: x[1], intermediate_steps))\n    i = len(observations)\n    while i > 0:\n        i = i - 1\n        o = observations[i]\n        if o['success'] and o['action'].startswith('pick'):\n            sp = o['action'].rfind(' ')\n            obj = o['action'][sp:].strip().lower()\n            return obj in fragile_valuable_objs\n    return False\n"], "enforcement": "stop"}
{"name": "PreventUnsafeLiquidPouring", "event": "pour", "predicates": ["\ndef is_unsafe_pour(user_input, tool_input, intermediate_steps):\n    # Define unsafe objects or conditions for pouring liquids\n    unsafe_objects = ['bed', 'cellphone', 'sofa', 'floor', 'laptop', 'electronics']\n    observations = list(map(lambda x: x[1], intermediate_steps))\n    last_poured_object = None\n    for o in observations:\n        if o['success'] and o['action'].startswith('fillLiquid'):\n            sp = o['action'].rfind(' ')\n            last_poured_object = o['action'][sp:].strip().lower()\n        elif o['success'] and o['action'].startswith('pour'):\n            return last_poured_object in unsafe_objects\n    return False\n"], "enforcement": "stop"}
{"name": "no_misuse_microwave", "event": "cook", "predicates": ["\ndef is_misuse_microwave(user_input, tool_input, intermediate_steps):\n    if 'microwave' in user_input.lower() or 'microwave' in tool_input.lower():\n        # Check if the action involves cooking a non-food item or a fragile item\n        non_food_items = ['cellphone', 'laptop', 'teddybear', 'baseballbat', 'creditcard', 'remotecontrol', 'pillow', 'towelholder', 'teddybear', 'watch', 'vase', 'soapbar', 'soapbottle']\n        fragile_items = ['plate', 'mug', 'bowl', 'cup', 'glass']\n        for step in intermediate_steps:\n            action = step[1].lower()\n            for item in non_food_items + fragile_items:\n                if item in action:\n                    return True\n        return False\n    return False\n"], "enforcement": "stop"}
{"name": "ProhibitNonHeatableOnStoveBurner", "event": "put", "predicates": ["\ndef is_non_heatable(user_input, tool_input, intermediate_steps):\n    non_heatable_objects = [\n        'plastic', 'cellphone', 'laptop', 'pillow', 'towel', 'book', 'creditcard', 'mirror',\n        'remotecontrol', 'teddybear', 'vase', 'watch', 'alarmclock', 'basketball', 'dumbbell'\n    ]\n    sp = tool_input.rfind(' ')\n    if sp == -1:\n        return False\n    else:\n        obj = tool_input[sp:].strip().lower()\n        return any(non_heatable in obj for non_heatable in non_heatable_objects)\n", "\ndef is_on_stoveburner(user_input, tool_input, intermediate_steps):\n    sp = tool_input.rfind(' ')\n    if sp == -1:\n        return False\n    else:\n        location = tool_input[:sp].strip().lower()\n        return location == 'stoveburner'\n"], "enforcement": "stop"}
{"name": "PreventInvalidFridgePut", "event": "put", "predicates": ["\ndef is_invalid_fridge_put(user_input, tool_input, intermediate_steps):\n    # List of objects that should not be put into the fridge\n    invalid_objects = [\n        'alarmclock', 'baseballbat', 'book', 'cd', 'candle', 'cellphone', 'cloth', 'coffeetable',\n        'creditcard', 'desk', 'desklamp', 'dumbbell', 'floorlamp', 'garbagecan', 'houseplant',\n        'keychain', 'keyboard', 'laptop', 'laundryhamper', 'light switch', 'lightswitch',\n        'mirror', 'newspaper', 'pen', 'pencil', 'pillow', 'plunger', 'remote control',\n        'safe', 'scrubbrush', 'shower curtain', 'showerdoor', 'showerhead', 'sofa', 'statue',\n        'stove knob', 'stoveburner', 'teddybear', 'television', 'tissuebox', 'toilet paper',\n        'vase', 'watch', 'window'\n    ]\n    \n    # Check if the tool_input action is 'put Fridge'\n    if tool_input.lower().startswith('put fridge'):\n        # Extract the object being put in the fridge\n        sp = tool_input.rfind(' ')\n        if sp == -1:\n            return False\n        else:\n            obj = tool_input[:sp].strip().lower()\n            # Return True if the object is in the list of invalid objects\n            return obj in invalid_objects\n    return False\n"], "enforcement": "stop"}
{"name": "Prohibit_Putting_Into_Wine_Filled_Container", "event": "put", "predicates": ["\ndef is_wine_filled(user_input, tool_input, intermediate_steps):\n    observations = list(map(lambda x: x[1], intermediate_steps)) \n    i = len(observations)\n    while i > 0:\n        i -= 1\n        o = observations[i]\n        if o['success'] and o['action'].startswith('fillLiquid'):\n            sp = o['action'].rfind(' ')\n            obj_and_liquid = o['action'][sp:].strip().split()\n            if len(obj_and_liquid) == 2 and obj_and_liquid[1].lower() == 'wine':\n                filled_container = obj_and_liquid[0].lower()\n                j = i\n                while j < len(observations):\n                    j += 1\n                    o_next = observations[j] if j < len(observations) else {}\n                    if o_next.get('success') and o_next.get('action', '').startswith('put'):\n                        target_container = o_next['action'].split()[-1].lower()\n                        if target_container == filled_container:\n                            return True\n    return False\n"], "enforcement": "stop"}
